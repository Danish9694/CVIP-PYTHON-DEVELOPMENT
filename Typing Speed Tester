import tkinter as tk
import random
import time

class TypingSpeedTester:
    def __init__(self, root):
        self.root = root
        self.root.title("Typing Speed Tester")

        self.text_to_type = self.generate_random_text()
        self.current_input = tk.StringVar()
        self.start_time = None

        self.create_widgets()

    def create_widgets(self):
        # Display the random text to type
        self.text_label = tk.Label(self.root, text=self.text_to_type, font=('Arial', 14))
        self.text_label.pack(pady=10)

        # Entry for user input
        self.input_entry = tk.Entry(self.root, textvariable=self.current_input, font=('Arial', 14))
        self.input_entry.pack(pady=10)
        self.input_entry.bind('<Key>', self.start_typing_timer)

        # Button to check typing speed
        self.check_button = tk.Button(self.root, text="Check Typing Speed", command=self.calculate_typing_speed)
        self.check_button.pack(pady=10)

        # Display typing speed result
        self.result_label = tk.Label(self.root, text="", font=('Arial', 14))
        self.result_label.pack(pady=10)

    def generate_random_text(self):
        # Replace this with a more extensive list of sentences for a more realistic typing practice
        sentences = ["The quick brown fox jumps over the lazy dog.",
                     "Python is a versatile programming language.",
                     "Coding exercises improve problem-solving skills.",
                     "Practice makes perfect.",
                     "check your typing skills here"]
        return random.choice(sentences)

    def start_typing_timer(self, event):
        if self.start_time is None:
            self.start_time = time.time()

    def calculate_typing_speed(self):
        if self.start_time is not None:
            end_time = time.time()
            elapsed_time = end_time - self.start_time

            typed_text = self.current_input.get()
            typed_words = len(typed_text.split())
            typing_speed = int(typed_words / (elapsed_time / 60))

            accuracy = self.calculate_accuracy(typed_text)

            result_text = f"Typing Speed: {typing_speed} WPM\nAccuracy: {accuracy}%"
            self.result_label.config(text=result_text)

            # Reset values for the next typing session
            self.text_to_type = self.generate_random_text()
            self.text_label.config(text=self.text_to_type)
            self.current_input.set("")
            self.start_time = None

    def calculate_accuracy(self, typed_text):
        correct_chars = sum([1 for c1, c2 in zip(typed_text, self.text_to_type) if c1 == c2])
        total_chars = len(self.text_to_type)
        accuracy_percentage = (correct_chars / total_chars) * 100
        return round(accuracy_percentage, 2)


if __name__ == "__main__":
    root = tk.Tk()
    app = TypingSpeedTester(root)
    root.mainloop()
