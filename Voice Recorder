import tkinter as tk
import threading
import pyaudio
import wave
import os
from datetime import datetime

class VoiceRecorder:
    def __init__(self, root):
        self.root = root
        self.root.title("Voice Recorder")

        self.frames = []
        self.is_recording = False

        self.create_widgets()

    def create_widgets(self):
        # Start recording button
        self.start_button = tk.Button(self.root, text="Start Recording", command=self.start_recording)
        self.start_button.pack(pady=10)

        # Stop recording button
        self.stop_button = tk.Button(self.root, text="Stop Recording", command=self.stop_recording)
        self.stop_button.pack(pady=10)

        # Listbox to display saved recordings
        self.recordings_listbox = tk.Listbox(self.root, selectmode=tk.SINGLE)
        self.recordings_listbox.pack(pady=10)

        # Play recording button
        self.play_button = tk.Button(self.root, text="Play Recording", command=self.play_recording)
        self.play_button.pack(pady=10)

    def start_recording(self):
        self.is_recording = True
        self.frames = []

        # Start a new thread for recording to avoid blocking the GUI
        threading.Thread(target=self.record_audio).start()

    def record_audio(self):
        chunk = 1024
        sample_format = pyaudio.paInt16
        channels = 2
        fs = 44100

        p = pyaudio.PyAudio()

        stream = p.open(format=sample_format,
                        channels=channels,
                        rate=fs,
                        frames_per_buffer=chunk,
                        input=True)

        while self.is_recording:
            data = stream.read(chunk)
            self.frames.append(data)

        stream.stop_stream()
        stream.close()
        p.terminate()

    def stop_recording(self):
        self.is_recording = False

        # Save the recording
        if self.frames:
            self.save_recording()

    def save_recording(self):
        filename = f"recording_{datetime.now().strftime('%Y%m%d_%H%M%S')}.wav"
        filepath = os.path.join(os.getcwd(), "recordings", filename)

        os.makedirs(os.path.join(os.getcwd(), "recordings"), exist_ok=True)

        wf = wave.open(filepath, 'wb')
        wf.setnchannels(2)
        wf.setsampwidth(pyaudio.PyAudio().get_sample_size(pyaudio.paInt16))
        wf.setframerate(44100)
        wf.writeframes(b''.join(self.frames))
        wf.close()

        self.recordings_listbox.insert(tk.END, filename)

    def play_recording(self):
        selected_index = self.recordings_listbox.curselection()
        if selected_index:
            filename = self.recordings_listbox.get(selected_index)
            filepath = os.path.join(os.getcwd(), "recordings", filename)

            threading.Thread(target=self.play_audio, args=(filepath,)).start()

    def play_audio(self, filepath):
        chunk = 1024
        wf = wave.open(filepath, 'rb')

        p = pyaudio.PyAudio()

        stream = p.open(format=p.get_format_from_width(wf.getsampwidth()),
                        channels=wf.getnchannels(),
                        rate=wf.getframerate(),
                        output=True)

        data = wf.readframes(chunk)

        while data:
            stream.write(data)
            data = wf.readframes(chunk)

        stream.stop_stream()
        stream.close()
        p.terminate()


if __name__ == "__main__":
    root = tk.Tk()
    app = VoiceRecorder(root)
    root.mainloop()
